#LyX 1.6.5 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language british
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\range}[1][]{#1_{1}\,\ldots\,#1_{n}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\rangem}[1][]{#1_{1}\,\ldots\,#1_{m}}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\CON}[2]{CON(#1\;#2)}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\FUN}[2]{FUN(#1\rightarrow#2)}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\PAP}[2]{PAP(#1\;#2)}
\end_inset


\end_layout

\begin_layout Standard
\begin_inset FormulaMacro
\newcommand{\THUNK}[1]{THUNK(#1)}
\end_inset


\end_layout

\begin_layout Section
Stg
\end_layout

\begin_layout Standard
Språket som vi har definerat är en utökning till STG-maskinen, med nya regler
 och tillstånd.
 För att kunna diskutera dessa behöver man först förstå hur maskinen fungerar.
 Eftersom läsaren inte förväntas ha stött på begrepp som används när man
 beskriver abstrakta maskiner och deras semantik, kommer vi att bygga upp
 förståelsen via ett exempel och introducera koncepten efter hand de.
 En abstrakt maskin kan beskrivas av att den evalueras stegvis under evalueringe
n, detta kommer bli tydligare med hjälp av genomstegning av evalueringen
 av följande program.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

cube x = x * x * x
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

main = let list = [2,3,5,7,11]
\end_layout

\begin_layout Plain Layout

        in map cube list
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Det som evalueras först är main funktionen och där finns ett let-uttryck.
 De är verktyget för att binda variabler, i det här fallet variablen list,
 till listan av de fem första primtalen.
 Man kan använda let för att associera andra sort värden än listor, t.ex.
 andra sorters datastrukturer, numeriska värden samt funktioner.
\end_layout

\begin_layout Standard
Vi behöver någonstanns att reservera utrymme för listan så därför inför
 vi en så kallad heap.
 I ett tradionellt, imperativt språk är det en representation av minnet
 som är för dynamisk allokering.
 När maskinen stöter på ett let-uttryck så allokerats det på heapen, detta
 beskrivs formellt av följande regel.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathtt{let\;\mathrm{x\mathtt{=}e}\; in\; code}\,;\, Heap\Rightarrow\mathtt{code}\,;\, Heap[x\mapsto e]\]

\end_inset


\end_layout

\begin_layout Standard
Läs det som att om maskinen är i tillståndet till vänster om 
\begin_inset Formula $\Rightarrow$
\end_inset

så blir nästa tillstånd det som står på högra sidan.
 Ett tillstånd i maskinen är ett uttryck och en heap, formellt separeras
 dessa med ett semikolon.
 I vårt fall så går maskinen från let-uttrycket till det som står efter
 in, samt att x läggs till i heapen och pekar på e.
 Heap[] betyder inte att heapen bara innehåller det som är inuti hakparanteserna
 utan är bara notation för att explicit påvisa vad en variabel binds till.
\end_layout

\begin_layout Standard
Maskinens tillstånd är nu: 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathtt{map\; cube\; list}\,;\, Heap[list\mapsto[2,3,5,7,11],cube\mapsto\lambda x.x\cdot x\cdot x,\ldots]\]

\end_inset


\end_layout

\begin_layout Standard
Den observanta läsaren märker att även cube ligger på heapen, det beror
 på att funktioner på topnivå läggs in i heapen i maskinens initialtillstånd.
 Alltså ligger även även map och andra kända standardfunktioner där.
 
\end_layout

\begin_layout Standard
Som uttryck ligger nu ett anrop till map funktionen, den vill vi anropa.
 Här låter vi oss inspereras av imperativ anropsmetodik.
 Argumenten lägger vi på en stack.
 Formellt får vi då denna regel:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
f\; a_{1}\;\ldots\; a_{n}\,;\, Stack\,;\, Heap\Rightarrow f\,;\, a_{1}:\ldots:a_{n}:Stack\,;\, Heap\]

\end_inset


\end_layout

\begin_layout Standard
Stacken är placerade mellan utrycket och heapen och vi använder : för att
 separera elementen på stacken, den tomma stacken skrivs som 
\begin_inset Formula $\epsilon$
\end_inset

.
 Maskinens tillstand ar:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathtt{map\,\mathrm{;}\, cube\,:\, list\,:\,\epsilon}\,;\, Heap\]

\end_inset


\end_layout

\begin_layout Standard
Nu behover vi diskutera koden for map:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

map f xs = case xs of
\end_layout

\begin_layout Plain Layout

    { Cons x xs -> let { a = f x 
\end_layout

\begin_layout Plain Layout

                       ; b = map f xs
\end_layout

\begin_layout Plain Layout

                       } in Cons a b
\end_layout

\begin_layout Plain Layout

    ; Nil       -> Nil
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Anledningen till att argumenten till Cons inte ar funktionsapplikationer
 ar att maskinen blir mer latthanterlig om funktionsapplikationer enbart
 far let-bundna variabler, aven kallade atomer.
 Vi ser har att map tar tva argument och ater saledes upp tva argument fran
 argumentstacken.
 Formellt:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
f\,;\, a_{1}:\ldots:a_{n}:Stack\,;\, Heap[f\mapsto\lambda x_{1}\ldots x_{n}.e]\Rightarrow e[a{}_{1}/x_{1}\ldots a_{n}/x_{n}];\, Stack\,;\, Heap\]

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Har ar argumenten lika manga som det argument pa stacken.
 Obviously!!!
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Har behover vi ersatta alla funktionens argument 
\begin_inset Formula $x_{1}\ldots x_{n}$
\end_inset

till de atomer 
\begin_inset Formula $a_{1}\ldots a_{n}$
\end_inset

som finns pa stacken.
 Vi noterar denna substitution med 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\noun off
\color none

\begin_inset Formula $e[a{}_{1}/x_{1}\ldots a_{n}/x_{n}]$
\end_inset

.
 I vart fall sa substitueras f mot cube och xs till list.
 Maskinen:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
\mathtt{case\; list\; of\,\lbrace\ldots\rbrace};\,\epsilon\,;\, Heap\]

\end_inset


\end_layout

\begin_layout Standard
I heapen pekar list på listan [2,3,5,7,11] men detta är socker för:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

list = Cons 2 temp1
\end_layout

\begin_layout Plain Layout

temp1 = Cons 3 temp2
\end_layout

\begin_layout Plain Layout

temp2 = Cons 5 temp3
\end_layout

\begin_layout Plain Layout

temp3 = Cons 7 temp4
\end_layout

\begin_layout Plain Layout

temp4 = Cons 11 nil
\end_layout

\begin_layout Plain Layout

nil = Nil
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
De temporära variablerna behövs för att konstruktorer skall kunna allokeras
 i ett sammanhängande minne i heapen.
 I vårat fall pekar list variabeln på en Cons konstruktor, som har en motsvarand
e gren i map funktionens definition.
 Det som ska hända är att maskinens uttryck blir grenen med x substituerat
 mot 2 och xs mot temp1.
 Detta kan vi åstadkomma med denna formella regel.
\end_layout

\begin_layout Standard
\begin_inset Formula \begin{multline*}
case\; v\; of\;\{\ldots;C\; x_{1}\,\ldots\, x_{n}\;\rightarrow e;\ldots\}\,;\, Stack\,;\, Heap[v\mapsto C\; a_{1}\ldots a_{n}]\\
\Rightarrow e[a_{1}/x_{1}\,\ldots\, a_{n}/x_{n}]\,;\, Stack\,;\, Heap\end{multline*}

\end_inset


\begin_inset Note Note
status open

\begin_layout Plain Layout
Default branch kan vara bra att nämna hörrö du! Dessutom inom ändlig tid,
 
\begin_inset Formula $O(<\infty)$
\end_inset

 håhå håhåhå
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Det som står i granskaren, uttrycket mellan case och of, var i vårt fall
 en variabel.
 Det finns också fall då granskaren är andra uttryck t.ex.
 funktionsapplikation.
 I så fall vet vi inte vilken gren vi ska ta innan vi har evaluerat granskaren,
 då måste vi evaluera den först.
 Vi måste veta efter vi evaluerat klart vilken case-sats den skall gå tillbaka
 till, det här är snarlikt en returadress.
 Standard i imperativa språk är att returadresser pushas på stacken.
 Det vi gör är att lägga ut en case-continuation på stacken som också innehåller
 grenarna till case-satsen.
 
\end_layout

\begin_layout Standard
Formellt kommer vi beskriva en case-continuation som 
\begin_inset Formula $case\;\bullet\; of\;\{\ldots\}$
\end_inset

 där 
\begin_inset Formula $\bullet$
\end_inset

 står för platsen vi skall lägga in resultatet.
 Så regeln blir följande:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
case\; e\; of\;\{\ldots\}\,;\, Stack\,;\, Heap\Rightarrow e\,;\, case\;\bullet\; of\;\{\ldots\}:Stack\,;\, Heap\]

\end_inset


\end_layout

\begin_layout Standard
Det här uttrycket kommer att evalueras till ett värde t.ex.
 en konstruktor.
 Då kommer case-continuation ligga överst på stacken och vi vill välja rätt
 gren.
 Vi vill återanvända grenväljarregeln som vi definerade ovan så därför inför
 vi denna regel som ställer in maskinen för detta.
 Formellt blir det:
\end_layout

\begin_layout Standard
\begin_inset Formula \[
v\,;\, case\;\bullet\; of\;\{\ldots\}:Stack\,;\, Heap\Rightarrow case\; v\; of\;\{\ldots\}\,;\, Stack\,;\, Heap\]

\end_inset


\end_layout

\begin_layout Standard
För att återgå till löpande exempel så är koden just nu detta:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

let { a = cube 2
\end_layout

\begin_layout Plain Layout

    ; b = map cube temp1
\end_layout

\begin_layout Plain Layout

    } in Cons a b
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Nu skall a bindas till ett uttryck, f 2, i tradionella språk skulle f 2
 först evalueras och dess värde bindas till a.
 Men eftersom STG är lat så väntar den med att beräkna det, ifall den inte
 skulle behövas.
 Ett sådant senarlagt uttryck kallas för en thunk, det som händer är att
 a binds till thunken 
\begin_inset Formula $\mathtt{f\;2}$
\end_inset

.
 På heapen finns flera olika sorters objekt: konstruktorer, lambda funktioner
 och nu även thunkar.
 Formellt kommer vi behöva skilja dem åt, så vi inför ny notation för dessa
 objekt.
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="3">
<features>
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Föregående syntax
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Faktisk syntax
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" bottomline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Beskrivning
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $C\;\range[a]$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\CON C{\range[a]}$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Konstruktor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\lambda\range[x].e$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\FUN{\range[x]}e$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Lambdafunktion
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
-
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
\begin_inset Formula $\THUNK e$
\end_inset


\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Senarelagd beräkning
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Så här skrivs egentligen map funktionen i STG språket utan något socker:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

map f xs = case xs of
\end_layout

\begin_layout Plain Layout

    { Cons x xs -> let { a = THUNK (f x) 
\end_layout

\begin_layout Plain Layout

                       ; b = THUNK (map f xs)
\end_layout

\begin_layout Plain Layout

                       ; c = CON (Cons a b)
\end_layout

\begin_layout Plain Layout

                       } in c
\end_layout

\begin_layout Plain Layout

    ; Nil       -> xs
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notera att i STG är det bara med let man kan allokera objekt, således måste
 vi använda en tempvariabel c för att returnera en konstruktor.
 Numera är vårt exempel med riktig syntax egentligen:
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

let { a = THUNK (cube 2)
\end_layout

\begin_layout Plain Layout

    ; b = THUNK (map cube temp1)
\end_layout

\begin_layout Plain Layout

    ; c = CON (Cons a b)
\end_layout

\begin_layout Plain Layout

    } in c
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Maskinen kommer stega igenom let-uttrycket och allokera objekten.
 Därefter returneras en variabel som pekar på en konstruktor i heapen som
 är en Cons, skapad enligt ovan.
 När man retunerar något som är en konstruktor sägs den vara i weak head
 normal form (WHNF).
 Denna behöver inte vara helt evaluerad, som exempel har vi vårt fall där
 den innehåller två pekare till olika thunkar.
 Eftersom STG är ett lat språk så är det upp till koden som kallade på map
 att fortsätta evaluera dessa thunkar ifall de behövs eller inte.
 I vårt fall är det main som har kallat på map och då main skriver ut det
 den har binds till kommer den att evaluera thunkarna.
 Vi tänker oss fallet då den börjar evaluera variabeln a.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
x\,;\, Stack\,;\, Heap[x\mapsto\THUNK e]\Rightarrow e\,;\, Upd\, x\,\bullet\,:\, Stack\,;\, Heap[x\mapsto BLACKHOLE]\]

\end_inset


\end_layout

\begin_layout Standard
Evalueringen av en thunk kommer då att flytta uttrycket till den nya koden
 för evaluering.
 Den kommer också lägga ut en Upd continuation, detta återigen för att STG
 är lat.
 Lathet kräver att utryck bara evalueras en gång, däför kommer vi när e
 har evaluerats till ett värde att spara det så att x pekar på det nya värdet
 och om x's värde skulle behövas igen kan man returnera det direkt.
 Under evalueringen av x sätter vi även x till ett BLACKHOLE, detta sker
 av två anledningar.
 
\end_layout

\begin_layout Enumerate
Om x beror på sig själv, eller flera variabler beror på varandra utan att
 producera värden.
 Om man evaluerade utan att sätta till BLACKHOLE skulle vår maskin komma
 in i en oändlig loop.
 Detta är ett sätt att upptäcka det och vi kan berätta för programmeraren
 att det har blivit ett fel.
\end_layout

\begin_layout Enumerate
Garbage Collection, gcn kommer gå igenom alla heap och stack objekt samt
 koden efter vilka värden som fortfarande kan nås via den nuvarande koden
 samt stacken.
 Thunken kan referera till objekt, som inte längre behövs för evalueringen,
 men gc kommer inte se att dessa objekt skulle kunna garbage collectas.
 Om man istället sätter det till ett BLACKHOLE kommer gc veta att den inte
 behöver söka efter vilka objekt som den behöver, då alla som behövs för
 den finns redan på koden samt stacken.
\end_layout

\begin_layout Standard
Det som saknas för thunkar är nu regeln som uppdaterar dem när de är klara,
 det sker via denna regel.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
v\,;\, Upd\, x\,\bullet:Stack\,;\, Heap\Rightarrow v\,;\, Stack\,;\, Heap[x\mapsto Heap[v]]\]

\end_inset


\end_layout

\begin_layout Standard
Om 
\begin_inset Formula $v$
\end_inset

 är ett värde så uppdateras 
\begin_inset Formula $x$
\end_inset

 med vad 
\begin_inset Formula $v$
\end_inset

 pekar på.
\end_layout

\begin_layout Standard
Det saknas nu bara en feature innan vår beskrivning av STG är komplett.
 Vad gör vi med funktioner som inte fått alla sina argument? 
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

max m n = case m < n of
\end_layout

\begin_layout Plain Layout

    { True  -> n
\end_layout

\begin_layout Plain Layout

    ; False -> m
\end_layout

\begin_layout Plain Layout

    }
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Om man nu skriver 
\begin_inset Formula $\mathtt{max\,100}$
\end_inset

 så är det en ny funktion som retunerar det maximala talet mellan dess input
 och 100.
 För detta kommer ett nytt heap objekt att skapas vid namn PAP som står
 för partial application.
 Denna kommer innehålla argumenten samt en pekare till funkitonen.
 
\end_layout

\begin_layout Standard
\begin_inset Formula \[
f\,;\, Arg\, a_{1}:\ldots:Arg\, a_{m}:Stack\,;\, Heap[f\mapsto\FUN{\range[x]}e\Rightarrow p\,;\, Stack\,;\, Heap[x\mapsto\PAP f{\rangem[a]}]\]

\end_inset


\end_layout

\begin_layout Standard
Där m < n, alltså är det en sparad funktionsapplikation som kommer utföras
 när resterande argument har kommit.
 Så för att avsluta så kommer regeln som verkligen gör applikationen av
 dessa partiellt applicerade objekt.
\end_layout

\begin_layout Standard
\begin_inset Formula \[
p\,;\, Arg\, a_{n+1}:Stack\,;\, Heap[p\mapsto\PAP f{\range[a]}\Rightarrow f\,;\, Arg\, a_{1}:\ldots:Arg\, a_{n}:Arg\, a_{n+1}:Stack\,;\, Heap\]

\end_inset


\end_layout

\begin_layout Standard
Denna regel kommer återigen försöka göra applikationen, antigen lyckas den,
 eller så kommer den skapa ett nytt PAP objekt med ytterligare argument.
\end_layout

\end_body
\end_document
